<?php namespace Unit;

use App\Domains\Currency\Services\Interfaces\CurrencyServiceInterface;
use Tests\TestCase;

/**
 * File: CurrencyServiceTest.php
 * Description:
 *
 * Author: Patryk Pasternak
 */
class CurrencyServiceTest extends TestCase
{

    /**
     * @var CurrencyServiceInterface
     */
    private $currencyService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->currencyService = app()->make(CurrencyServiceInterface::class);
    }

    public function testGetActualRatesReturnArray()
    {
        $data = $this->currencyService->getActualRates();
        $this->assertTrue(is_array($data));
    }

    public function testGetActualRatesContainCurrencyEUR()
    {
        $data = $this->currencyService->getActualRates();
        $filteredData = collect($data)->where('code_currency','EUR');
        $this->assertTrue($filteredData->isNotEmpty());
    }

    public function testGetSpecifyRatesWithCurrencyParam()
    {
        $data = $this->currencyService->getSpecifyRates('EUR');
        $this->assertTrue(is_array($data));
    }

    public function testGetSpecifyRatesWithCurrencyAndFromDateParams()
    {
        $data = $this->currencyService->getSpecifyRates('EUR', '2020-03-17');
        $this->assertTrue(is_array($data));
    }

    public function testGetSpecifyRatesWithCurrencyAndFromDateAndToDateParams()
    {
        $data = $this->currencyService->getSpecifyRates('EUR', '2020-03-17', '2020-07-27');
        $this->assertTrue(is_array($data));
    }

    public function testGetSpecifyRatesWithCurrencyAndFromDateAndToDateAndSortParams()
    {
        $data = $this->currencyService->getSpecifyRates('EUR', '2020-03-17', '2020-07-27', 'desc');
        $this->assertTrue(is_array($data));
    }

    public function testGetSpecifyRatesForValidCurrency()
    {
        $this->expectExceptionMessage('Not found data for provided currency!');
        $data = $this->currencyService->getSpecifyRates('xxxx');
    }

}
